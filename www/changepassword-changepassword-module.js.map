{"version":3,"sources":["webpack:///./src/app/changepassword/changepassword.module.ts","webpack:///./src/app/changepassword/changepassword.page.html","webpack:///./src/app/changepassword/changepassword.page.scss","webpack:///./src/app/changepassword/changepassword.page.ts"],"names":[],"mappings":"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","file":"changepassword-changepassword-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChangepasswordPage } from './changepassword.page';\nimport { MatInputModule, MatIconModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChangepasswordPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MatInputModule,\n    MatIconModule,\n    ReactiveFormsModule.withConfig({ warnOnNgModelWithFormControl: 'never' }),\n\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ChangepasswordPage]\n})\nexport class ChangepasswordPageModule { }\n","module.exports = \"<ion-toolbar class=\\\"new-background-color\\\">\\n  <ion-buttons slot=\\\"start\\\">\\n    <ion-menu-button></ion-menu-button>\\n  </ion-buttons>\\n  <ion-item lines=\\\"none\\\" class=\\\"new-background-color\\\" style=\\\"color: #2b0c43\\\">\\n    <ion-title>\\n      Change Password\\n    </ion-title>\\n    <ion-icon class=\\\"headerNameCss\\\" name=\\\"notifications\\\" (click)=\\\"navigateToNotification()\\\" aria-label=\\\"notifications button\\\" alt=\\\"notifications button\\\"></ion-icon>\\n    <ion-badge *ngIf=\\\"badgecount != 0\\\" id=\\\"notifications-badge\\\" color=\\\"danger\\\">{{badgecount}}</ion-badge>\\n  </ion-item>\\n</ion-toolbar>\\n\\n<ion-content>\\n  <ion-card class=\\\"cardMargins\\\" style=\\\"height: 100%;\\\">\\n    <ion-card-content>\\n      <form [formGroup]=\\\"changePasswordForm\\\" (ngSubmit)=\\\"submit(changePasswordForm.value)\\\">\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <input type=\\\"password\\\"  matInput placeholder=\\\"Current Password\\\"  formControlName=\\\"currentPassword\\\"\\n            pattern=\\\".*[^ ].*\\\">\\n          <mat-icon matSuffix color=\\\"warn\\\"\\n            *ngIf=\\\"(changePasswordForm.controls.currentPassword.invalid && changePasswordForm.controls.currentPassword.touched) || (changePasswordForm.controls.currentPassword.invalid && showErrorIcon && !changePasswordForm.controls.currentPassword.touched)\\\">\\n            error\\n          </mat-icon>\\n          <mat-error>\\n            <span *ngIf=\\\"changePasswordForm.controls.currentPassword.errors?.required\\\">Current Password is\\n              required.</span>\\n            <span *ngIf=\\\"changePasswordForm.controls.currentPassword.errors?.pattern\\\">Please enter valid current\\n              password.</span>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <input type=\\\"password\\\"  matInput placeholder=\\\"New Password\\\" formControlName=\\\"newPassword\\\"\\n            pattern=\\\".*[^ ].*\\\">\\n          <mat-icon matSuffix color=\\\"warn\\\"\\n            *ngIf=\\\"(changePasswordForm.controls.newPassword.invalid && changePasswordForm.controls.newPassword.touched) || (changePasswordForm.controls.newPassword.invalid && showErrorIcon && !changePasswordForm.controls.newPassword.touched)\\\">\\n            error\\n          </mat-icon>\\n          <mat-error>\\n            <span *ngIf=\\\"changePasswordForm.controls.newPassword.errors?.required\\\">New Password is required.</span>\\n            <span *ngIf=\\\"changePasswordForm.controls.newPassword.errors?.pattern\\\">Please enter valid\\n              new password.</span>\\n            <span\\n              *ngIf=\\\"changePasswordForm.controls.newPassword.errors?.minlength && !changePasswordForm.controls.newPassword.errors?.required && !changePasswordForm.controls.newPassword.errors?.pattern\\\">New\\n              password should be at least 6\\n              characters long</span>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <input type=\\\"password\\\" matInput placeholder=\\\"Confirm password\\\" formControlName=\\\"confirmPassword\\\"\\n            pattern=\\\".*[^ ].*\\\" [errorStateMatcher]=\\\"matcher\\\">\\n          <mat-icon matSuffix color=\\\"warn\\\"\\n            *ngIf=\\\"(changePasswordForm.controls.confirmPassword.invalid && changePasswordForm.controls.confirmPassword.touched) || (changePasswordForm.controls.confirmPassword.invalid && showErrorIcon && !changePasswordForm.controls.confirmPassword.touched)\\\">\\n            error\\n          </mat-icon>\\n          <mat-error>\\n            <span *ngIf=\\\"changePasswordForm.controls.confirmPassword.errors?.required\\\">Confirm password is\\n              required.</span>\\n\\n            <!-- <span *ngIf=\\\"changePasswordForm.controls.confirmPassword.errors?.pattern\\\">Please enter valid\\n              confirm password.</span> -->\\n            <!-- <span *ngIf=\\\"changePasswordForm.controls.confirmPassword.errors?.minlength && !changePasswordForm.controls.confirmPassword.errors?.required && !changePasswordForm.controls.confirmPassword.errors?.pattern\\\">Confirm password should be at least 6\\n                  characters long</span> -->\\n          </mat-error>\\n        </mat-form-field>\\n        <button type=\\\"submit\\\" class=\\\"buttonfont selector loginButton\\\">SUBMIT</button>\\n\\n      </form>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <!-- <div class=\\\"inputDiv\\\">\\n \\n    <ion-row>\\n      <ion-col size=\\\"12\\\">\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\">\\n      </ion-col>\\n    </ion-row>\\n    <ion-item class=\\\"inoItem\\\" style=\\\"margin-top:0%\\\">\\n      <ion-grid fixed>\\n        <ion-row>\\n          <ion-col size=\\\"10\\\">\\n            <ion-label position=\\\"floating\\\"\\n              [ngClass]=\\\"{'redlabel' : showCurrentPasswordErrorMsg == true, 'blacklabel' : showCurrentPasswordErrorMsg == false}\\\">\\n              Current password\\n            </ion-label>\\n            <ion-input type=\\\"password\\\" name=\\\"currentPassword\\\" [(ngModel)]=\\\"currentPassword\\\"\\n              (ionChange)=\\\"currentPasswordValidator()\\\" required pattern=\\\"^[0-9a-zA-Z]{6,}$\\\"></ion-input>\\n          </ion-col>\\n          <ion-col size=\\\"2\\\">\\n            <ion-img *ngIf=\\\"showCurrentPasswordErrorMsg\\\" class=\\\"errorimg\\\" src=\\\"assets/img/error.png\\\">\\n            </ion-img>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-item>\\n    <ion-row>\\n      <ion-col size=\\\"10\\\">\\n        <p class=\\\"errorMsg\\\" *ngIf=\\\"showCurrentPasswordErrorMsg\\\" style=\\\"margin-top: 0%;\\\">{{currentPasswordErrorMsg}}</p>\\n      </ion-col>\\n    </ion-row>\\n\\n\\n\\n    <ion-item class=\\\"inoItem\\\">\\n      <ion-grid fixed>\\n        <ion-row>\\n          <ion-col size=\\\"10\\\">\\n            <ion-label position=\\\"floating\\\"\\n              [ngClass]=\\\"{'redlabel' : showNewPasswordErrorMsg == true, 'blacklabel' : showNewPasswordErrorMsg == false}\\\">\\n              New password\\n            </ion-label>\\n            <ion-input type=\\\"password\\\" name=\\\"newPassword\\\" [(ngModel)]=\\\"newPassword\\\" (ionChange)=\\\"newPasswordValidator()\\\"\\n              required pattern=\\\"^[0-9a-zA-Z]{6,}$\\\">\\n            </ion-input>\\n          </ion-col>\\n          <ion-col size=\\\"2\\\">\\n            <ion-img *ngIf=\\\"showNewPasswordErrorMsg\\\" class=\\\"errorimg\\\" src=\\\"assets/img/error.png\\\">\\n            </ion-img>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-item>\\n    <ion-row>\\n      <ion-col size=\\\"10\\\">\\n        <p class=\\\"errorMsg\\\" *ngIf=\\\"showNewPasswordErrorMsg\\\" style=\\\"margin-top: 0%;\\\">{{newPasswordErrorMsg}}</p>\\n      </ion-col>\\n    </ion-row>\\n\\n    <ion-item class=\\\"inoItem\\\">\\n      <ion-grid fixed>\\n        <ion-row>\\n          <ion-col size=\\\"10\\\">\\n            <ion-label position=\\\"floating\\\"\\n              [ngClass]=\\\"{'redlabel' : showConfirmPasswordErrorMsg == true, 'blacklabel' : showConfirmPasswordErrorMsg == false}\\\">\\n              Confirm password\\n            </ion-label>\\n            <ion-input type=\\\"password\\\" name=\\\"confirmPassword\\\" [(ngModel)]=\\\"confirmPassword\\\"\\n              (ionChange)=\\\"confirmPasswordValidator()\\\" required pattern=\\\"^[0-9a-zA-Z]{6,}$\\\"></ion-input>\\n          </ion-col>\\n          <ion-col size=\\\"2\\\">\\n            <ion-img *ngIf=\\\"showConfirmPasswordErrorMsg\\\" class=\\\"errorimg\\\" src=\\\"assets/img/error.png\\\">\\n            </ion-img>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-item>\\n    <ion-row>\\n      <ion-col size=\\\"10\\\">\\n        <p class=\\\"errorMsg\\\" *ngIf=\\\"showConfirmPasswordErrorMsg\\\" style=\\\"margin-top: 0%;\\\">{{confirmPasswordErrorMsg}}</p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\">\\n      </ion-col>\\n    </ion-row>\\n    <div class=\\\"saveButtonPadding\\\">\\n      <button class=\\\"buttonfont\\\" (click)=\\\"submit()\\\">Submit</button>\\n    </div>\\n  </div> -->\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NoYW5nZXBhc3N3b3JkL2NoYW5nZXBhc3N3b3JkLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { AlertController, LoadingController, NavController } from '@ionic/angular';\nimport { DataservicesService } from '../providers/dataservices/dataservices.service';\nimport { Router } from '@angular/router';\n\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { TextToSpeech } from '@ionic-native/text-to-speech/ngx';\nimport { MobileAccessibility } from '@ionic-native/mobile-accessibility/ngx';\n\n@Component({\n  selector: 'app-changepassword',\n  templateUrl: './changepassword.page.html',\n  styleUrls: ['./changepassword.page.scss'],\n})\nexport class ChangepasswordPage implements OnInit {\n  changePasswordForm: FormGroup;\n  showErrorIcon: boolean = false\n  // newPassword: any\n  // confirmPassword: any\n  badgecount: any\n\n  constructor\n    (\n      public alertCtrl: AlertController,\n      public loadingController: LoadingController,\n      public dataServices: DataservicesService,\n      private router: Router,\n      public formBuilder: FormBuilder,\n      public navCtrl: NavController,\n      private tts: TextToSpeech,\n      private mobileAccessibility: MobileAccessibility\n    ) { }\n\n  ngOnInit() {\n    this.buildForm()\n  }\n\n  ionViewWillEnter() {\n    this.getNotificationBadgeCount()\n  }\n\n  ionViewDidEnter() {\n    this.mobileAccessibility.isScreenReaderRunning().then(bool => {\n      if (bool) {\n        setTimeout(() => {\n          this.tts.speak('Change Password Screen')\n            .then(() => console.log('Success'))\n            .catch((reason: any) => console.log(reason));\n        }, 1000);\n      }\n    })\n  }\n\n  buildForm() {\n    this.changePasswordForm = this.formBuilder.group({\n      currentPassword: ['', Validators.required],\n      newPassword: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      confirmPassword: ['', Validators.required],\n    });\n  }\n\n\n  // checkPasswords(group: FormGroup) { // here we have the 'passwords' group\n  //   let pass = group.controls.newPassword.value;\n  //   let confirmPass = group.controls.confirmPassword.value;\n  //   this.notSame = pass === confirmPass ? false : true\n  //   return this.notSame\n  // }\n\n\n\n\n\n  submit(credentials) {\n    if (this.changePasswordForm.invalid) {\n      this.showErrorIcon = true\n      return\n    } else {\n      if (credentials.newPassword != credentials.confirmPassword) {\n        this.presentAlert('New password and confirm password does not match', '', 'no')\n      } else {\n        let postData = {\n          \"current_password\": credentials.currentPassword,\n          \"new_password\": credentials.newPassword,\n          \"uacc_id\": localStorage.getItem('users_id')\n        }\n        this.changePasswordAPI(postData)\n      }\n    }\n  }\n\n  changePasswordAPI(postData: any) {\n    this.presentLoading();\n    this.dataServices.changePassword(postData).then((res: any) => {\n\n      if (res.status == 1) {\n        this.loadingController.dismiss()\n        this.presentAlert(res.message, '', 'yes')\n      } else {\n        this.loadingController.dismiss()\n        this.presentAlert(res.message, '', 'yes')\n      }\n    }, error => {\n      this.loadingController.dismiss()\n      console.log('Error in login: ' + JSON.stringify(error))\n    })\n  }\n  async presentLoading() {\n    const loading = await this.loadingController.create({\n      message: 'Please wait...',\n      // spinner: null\n    });\n    await loading.present();\n  }\n\n  closePage() {\n    let usertype = localStorage.getItem('userstype')\n    if (usertype == '4') {\n      this.navCtrl.navigateRoot('/dashboardemployer');\n\n    } else if (usertype == '5') {\n      this.navCtrl.navigateRoot('/dashboardjobseeker');\n\n    } else {\n      this.navCtrl.navigateRoot('/dashboardserviceprovider');\n    }\n\n  }\n\n  getNotificationBadgeCount() {\n    this.dataServices.getNotificationBadgeCount().then((result: any) => {\n      if (result.status == 1) {\n        this.badgecount = result.total_notification_count\n      }\n    }, error => {\n      console.log('Error in getNotificationBadgeCount: ' + JSON.stringify(error))\n    })\n  }\n\n  navigateToNotification() {\n    this.router.navigate(['/notification'])\n  }\n\n  async presentAlert(title, message, redirect) {\n    const alert = await this.alertCtrl.create({\n      header: title,\n      message: message,\n      // buttons: ['OK']\n      buttons: [\n        {\n          text: 'OK',\n          handler: () => {\n            if (redirect == 'yes') {\n              this.closePage()\n              // this.changePasswordForm.reset()\n            }\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  ionViewWillLeave() {\n\n  }\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n"],"sourceRoot":""}