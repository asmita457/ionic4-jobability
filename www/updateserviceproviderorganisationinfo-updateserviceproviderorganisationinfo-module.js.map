{"version":3,"sources":["webpack:///./src/app/updateserviceproviderorganisationinfo/updateserviceproviderorganisationinfo.module.ts","webpack:///./src/app/updateserviceproviderorganisationinfo/updateserviceproviderorganisationinfo.page.html","webpack:///./src/app/updateserviceproviderorganisationinfo/updateserviceproviderorganisationinfo.page.scss","webpack:///./src/app/updateserviceproviderorganisationinfo/updateserviceproviderorganisationinfo.page.ts"],"names":[],"mappings":"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","file":"updateserviceproviderorganisationinfo-updateserviceproviderorganisationinfo-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UpdateserviceproviderorganisationinfoPage } from './updateserviceproviderorganisationinfo.page';\nimport { MatInputModule, MatIconModule, MatSelectModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UpdateserviceproviderorganisationinfoPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule.withConfig({ warnOnNgModelWithFormControl: 'never' }),\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UpdateserviceproviderorganisationinfoPage]\n})\nexport class UpdateserviceproviderorganisationinfoPageModule { }\n","module.exports = \"<ion-toolbar class=\\\"new-background-color\\\">\\n  <ion-item lines=\\\"none\\\" class=\\\"new-background-color\\\">\\n    <ion-icon (click)=\\\"closePage()\\\" name=\\\"close\\\" style=\\\" color: #2b0c43\\\"></ion-icon>\\n    <ion-title style=\\\"margin-left: 5%; color: #2b0c43\\\">Organization Information</ion-title>\\n  </ion-item>\\n</ion-toolbar>\\n\\n<ion-content>\\n  <div class=\\\"formPadding\\\">\\n    <form [formGroup]=\\\"updateOrgInfoForm\\\" (ngSubmit)=\\\"updateOrgInfoDetails(updateOrgInfoForm.value)\\\">\\n      <div class=\\\"inputDiv\\\">\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <mat-label>Service Provider Type</mat-label>\\n          <mat-select formControlName=\\\"serviceProviderType\\\" [(ngModel)]=\\\"preSelectionData.organizationtype\\\"\\n            (selectionChange)=\\\"selectedServiceProviderValue($event.value)\\\">\\n            <mat-option *ngFor=\\\"let item of serviceProviderArray\\\" [value]=\\\"item.id\\\">\\n              {{item.name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.serviceProviderType.errors?.required\\\">Service provider type is\\n              required.</span>\\n          </mat-error>\\n        </mat-form-field>\\n        <div *ngIf=\\\"show\\\">\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <mat-label>Service Provider Category</mat-label>\\n            <mat-select formControlName=\\\"serviceProviderCategory\\\" [(ngModel)]=\\\"preSelectionData.serviceProviderCategory\\\"\\n              multiple>\\n              <mat-option *ngFor=\\\"let item of organisationTypeList\\\" [value]=\\\"item.id\\\">\\n                {{item.name}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <span *ngIf=\\\"updateOrgInfoForm.controls.serviceProviderCategory.errors?.required\\\">Service provider\\n                Category is required.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <input matInput placeholder=\\\"Organization Name\\\" [(ngModel)]=\\\"preSelectionData.organisation_name\\\"\\n              formControlName=\\\"organisatioName\\\" [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\"^[a-zA-Z]+[\\\\-'\\\\s]?[a-zA-Z ]+$\\\">\\n            <mat-icon matSuffix color=\\\"warn\\\"\\n              *ngIf=\\\"(updateOrgInfoForm.controls.organisatioName.invalid && updateOrgInfoForm.controls.organisatioName.touched) || (updateOrgInfoForm.controls.organisatioName.invalid && showErrorIcon && !updateOrgInfoForm.controls.organisatioName.touched)\\\">\\n              error\\n            </mat-icon>\\n            <mat-error>\\n              <span *ngIf=\\\"updateOrgInfoForm.controls.organisatioName.errors?.required\\\">Organization name is\\n                required.</span>\\n              <span *ngIf=\\\"updateOrgInfoForm.controls.organisatioName.errors?.pattern\\\">Please enter valid\\n                organization name.</span>\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <mat-label>Disability Type</mat-label>\\n          <mat-select formControlName=\\\"disability\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n            [(ngModel)]=\\\"preSelectionData.disabilityIds\\\" multiple>\\n            <mat-option *ngFor=\\\"let item of disabilityArray\\\" [value]=\\\"item.id\\\">\\n              {{item.name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.disability.errors?.required\\\">Please select at least one\\n              disability type.</span>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <mat-label>Services Offered</mat-label>\\n          <mat-select formControlName=\\\"serviceOffered\\\" [(ngModel)]=\\\"preSelectionData.servicetype_id\\\" multiple>\\n            <mat-option *ngFor=\\\"let item of serviceOfferedList\\\" [value]=\\\"item.id\\\">\\n              {{item.name}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.serviceOffered.errors?.required\\\">Services offered is\\n              required.</span>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <mat-label>Year of Establishment</mat-label>\\n          <mat-select formControlName=\\\"yearOfEstablishment\\\" [(ngModel)]=\\\"preSelectionData.year_establishment\\\">\\n            <mat-option *ngFor=\\\"let item of yearArray\\\" [value]=\\\"item\\\">\\n              {{item}}\\n            </mat-option>\\n          </mat-select>\\n          <mat-error>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.yearOfEstablishment.errors?.required\\\">Year of establishment is\\n              required.</span>\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"inputFields\\\">\\n          <input matInput placeholder=\\\"Website URL\\\" [(ngModel)]=\\\"preSelectionData.website_url\\\"\\n            formControlName=\\\"websiteURL\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n            pattern=\\\"^((https?|ftp|smtp):\\\\/\\\\/)?[a-zA-Z0-9]+(\\\\.[a-z]{2,}){1,3}(#?\\\\/?[a-zA-Z0-9#]+)*\\\\/?(\\\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$\\\">\\n          <mat-icon matSuffix color=\\\"warn\\\"\\n            *ngIf=\\\"(updateOrgInfoForm.controls.websiteURL.invalid && updateOrgInfoForm.controls.websiteURL.touched) || (updateOrgInfoForm.controls.websiteURL.invalid && showErrorIcon && !updateOrgInfoForm.controls.websiteURL.touched)\\\">\\n            error\\n          </mat-icon>\\n          <mat-error>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.websiteURL.errors?.required\\\">Website URL is\\n              required.</span>\\n            <span *ngIf=\\\"updateOrgInfoForm.controls.websiteURL.errors?.pattern\\\">Please enter valid\\n              website URL.</span>\\n          </mat-error>\\n        </mat-form-field>\\n        <br>\\n      </div>\\n      <button type=\\\"submit\\\" class=\\\"buttonfont selector\\\">SAVE</button>\\n    </form>\\n  </div>\\n</ion-content>\"","module.exports = \".selectmargin {\\n  margin-left: 10%;\\n  margin-right: 10%; }\\n\\n.floatingcss {\\n  width: 90%;\\n  margin-left: 5%;\\n  margin-right: 5%;\\n  font-size: 14px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWpheV9tYWNib29rYWlyL0RvY3VtZW50cy9naXRsYWIvYXRpbi1qb2JhYmlsaXR5LWFuZHJvaWQvc3JjL2FwcC91cGRhdGVzZXJ2aWNlcHJvdmlkZXJvcmdhbmlzYXRpb25pbmZvL3VwZGF0ZXNlcnZpY2Vwcm92aWRlcm9yZ2FuaXNhdGlvbmluZm8ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQWdCO0VBQ2hCLGlCQUFpQixFQUFBOztBQUdyQjtFQUNJLFVBQVM7RUFDVCxlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGVBQWMsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3VwZGF0ZXNlcnZpY2Vwcm92aWRlcm9yZ2FuaXNhdGlvbmluZm8vdXBkYXRlc2VydmljZXByb3ZpZGVyb3JnYW5pc2F0aW9uaW5mby5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2VsZWN0bWFyZ2lue1xuICAgIG1hcmdpbi1sZWZ0OiAxMCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMCU7XG59XG5cbi5mbG9hdGluZ2Nzc3tcbiAgICB3aWR0aDo5MCU7XG4gICAgbWFyZ2luLWxlZnQ6IDUlO1xuICAgIG1hcmdpbi1yaWdodDogNSU7XG4gICAgZm9udC1zaXplOjE0cHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataservicesService } from '../providers/dataservices/dataservices.service';\nimport { AlertController, MenuController, Events, LoadingController } from '@ionic/angular';\n\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n    selector: 'app-updateserviceproviderorganisationinfo',\n    templateUrl: './updateserviceproviderorganisationinfo.page.html',\n    styleUrls: ['./updateserviceproviderorganisationinfo.page.scss'],\n})\nexport class UpdateserviceproviderorganisationinfoPage implements OnInit {\n\n    updateOrgInfoForm: FormGroup;\n    showErrorIcon: boolean = false\n\n    disabilityArray = []\n    organizationTypeList = []\n    serviceOfferedList = []\n    organisationTypeList = []\n    preSelectionData: any\n    show = false;\n    yearArray: any = []\n    serviceProviderArray = [{ name: 'Organization', id: '1' }, { name: 'Service Professional', id: '2' },]\n\n    constructor(private router: Router,\n        private activatedRoute: ActivatedRoute,\n        public alertCtrl: AlertController,\n        private dataServices: DataservicesService,\n        public menuCtrl: MenuController,\n        public loadingController: LoadingController,\n        public formBuilder: FormBuilder,\n    ) {\n        this.onPageLoad()\n    }\n\n    ngOnInit() {\n        this.buildForm()\n        this.setOrganizationValdators()\n    }\n\n    ionViewWillEnter() {\n        this.menuCtrl.enable(false)\n    }\n\n    buildForm() {\n        this.updateOrgInfoForm = this.formBuilder.group({\n            serviceProviderType: ['', Validators.required],\n            serviceProviderCategory: ['', Validators.required],\n            organisatioName: ['', Validators.required],\n            disability: ['', Validators.required],\n            serviceOffered: ['', Validators.required],\n            yearOfEstablishment: ['', Validators.required],\n            websiteURL: ['', Validators.required]\n        });\n    }\n\n    onPageLoad() {\n        const dropData = localStorage.getItem('stateAndCityArray')\n        const dropDownLists = JSON.parse(dropData).ddl_list\n        this.disabilityArray = dropDownLists.disability_list\n        this.organizationTypeList = dropDownLists.organization_type_list\n        this.serviceOfferedList = dropDownLists.service_offered_list\n        this.organisationTypeList = dropDownLists.organization_type_list\n\n        this.preSelectionData = JSON.parse((this.activatedRoute.snapshot.paramMap.get('serviceProviderOrgInfo')));\n        this.show = this.preSelectionData.organizationtype == '1' ? true : false\n\n        // if (this.organizationtype == \"1\") {\n        //     this.show = true;\n        // } else if (this.organizationtype == \"2\") {\n        //     this.show = false;\n        // }\n\n        let currentYear = new Date().getFullYear()\n        for (let i = currentYear; i >= 1965; i--) {\n            this.yearArray.push(i.toString());\n        }\n    }\n\n    setOrganizationValdators() {\n        const serviceProviderCategory = this.updateOrgInfoForm.get('serviceProviderCategory');\n        const organisatioName = this.updateOrgInfoForm.get('organisatioName');\n\n        this.updateOrgInfoForm.get('serviceProviderType').valueChanges\n            .subscribe(serviceProviderType => {\n\n                if (serviceProviderType == '1') {\n                    serviceProviderCategory.setValidators([Validators.required])\n                    organisatioName.setValidators([Validators.required])\n                } else {\n                    serviceProviderCategory.setValidators(null)\n                    organisatioName.setValidators(null)\n                }\n\n                serviceProviderCategory.updateValueAndValidity();\n                organisatioName.updateValueAndValidity();\n            });\n    }\n\n    selectedServiceProviderValue(serviceType: any) {\n        this.show = serviceType == '1' ? true : false\n    }\n\n    closePage() {\n        this.router.navigate(['/serviceproviderprofile']);\n    }\n\n    updateOrgInfoDetails(orgInfoForm) {\n        if (this.updateOrgInfoForm.invalid) {\n            this.showErrorIcon = true\n            return\n        } else {\n            this.presentLoading()\n            var postData = {\n                \"organizationtype\": orgInfoForm.serviceProviderType,\n                \"organization_type_id\": orgInfoForm.serviceProviderType == '2' ? '' : orgInfoForm.serviceProviderCategory,\n                \"year_establishment\": orgInfoForm.yearOfEstablishment,\n                \"website_url\": orgInfoForm.websiteURL,\n                \"organisation_name\": orgInfoForm.serviceProviderType == '2' ? '' : orgInfoForm.organisatioName,\n                \"disability_id\": orgInfoForm.disability,\n                \"servicetype_id\": orgInfoForm.serviceOffered,\n                \"uacc_id\": localStorage.getItem('users_id')\n            }\n\n            this.dataServices.updateServiceproviderOrganisationInfoAPI(postData).then((res: any) => {\n                if (res.status == 1) {\n                    this.loadingController.dismiss()\n                    this.presentAlert('', res.message);\n                }\n                else {\n                    this.loadingController.dismiss()\n                    this.presentAlert('', res.message);\n                }\n            }, (error) => {\n                alert(error);\n            });\n        }\n    }\n\n\n    async presentAlert(title, message) {\n        const alert = await this.alertCtrl.create({\n            header: title,\n            subHeader: message,\n            buttons: [{\n                text: 'OK',\n                cssClass: 'secondary',\n                handler: (blah) => {\n                    this.closePage();\n                }\n            }]\n        });\n        await alert.present();\n    }\n\n    //Display loader \n    async presentLoading() {\n        const loading = await this.loadingController.create({\n            message: 'Please wait...',\n            // spinner: null\n        });\n        await loading.present();\n      \n    }//Display Function Ends Here \n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n    }\n}"],"sourceRoot":""}