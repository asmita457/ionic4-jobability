{"version":3,"sources":["webpack:///./src/app/editservices/editservices.module.ts","webpack:///./src/app/editservices/editservices.page.html","webpack:///./src/app/editservices/editservices.page.scss","webpack:///./src/app/editservices/editservices.page.ts"],"names":[],"mappings":"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","file":"editservices-editservices-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule ,ReactiveFormsModule} from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EditservicesPage } from './editservices.page';\nimport { MatInputModule, MatIconModule,MatSelectModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EditservicesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    RouterModule.forChild(routes)\n  ],\n  declarations: [EditservicesPage]\n})\nexport class EditservicesPageModule {}\n","module.exports = \"<ion-toolbar class=\\\"new-background-color\\\">\\n  <ion-item lines=\\\"none\\\" class=\\\"new-background-color\\\">\\n    <ion-icon (click)=\\\"closePage()\\\" name=\\\"close\\\" style=\\\" color: #2b0c43\\\"></ion-icon>\\n    <ion-title style=\\\"margin-left: 5%; color: #2b0c43\\\">Edit Service Detail</ion-title>\\n  </ion-item>\\n</ion-toolbar>\\n\\n<ion-content>\\n  <ion-card class=\\\"cardMargins boxShadow\\\">\\n    <ion-card-content>\\n      <div class=\\\"formPadding\\\">\\n        <form [formGroup]=\\\"editServiceForm\\\" (ngSubmit)=\\\"updateServiceDetail(editServiceForm.value)\\\">\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <input matInput placeholder=\\\"Service Title\\\" [(ngModel)]=\\\"editServiceDetails.Service_Title\\\"\\n              formControlName=\\\"serviceTitle\\\" [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\".*[^ ].*\\\">\\n            <mat-icon matSuffix color=\\\"warn\\\"\\n              *ngIf=\\\"(editServiceForm.controls.serviceTitle.invalid && editServiceForm.controls.serviceTitle.touched) || (editServiceForm.controls.serviceTitle.invalid && showErrorIcon && !editServiceForm.controls.serviceTitle.touched)\\\">\\n              error\\n            </mat-icon>\\n            <mat-error>\\n              <span *ngIf=\\\"editServiceForm.controls.serviceTitle.errors?.required\\\">Service title is required.</span>\\n              <span *ngIf=\\\"editServiceForm.controls.serviceTitle.errors?.pattern\\\">Please enter valid service\\n                title.</span>\\n\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <mat-label>Service Category</mat-label>\\n            <mat-select formControlName=\\\"serviceCategory\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n              [(ngModel)]=\\\"editServiceDetails.Service_Category\\\" multiple>\\n              <mat-option *ngFor=\\\"let item of categoryArray\\\" [value]=\\\"item.id\\\">\\n                {{item.name}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <span *ngIf=\\\"editServiceForm.controls.serviceCategory.errors?.required\\\">Service category is\\n                required.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <mat-label>Disability Type</mat-label>\\n            <mat-select formControlName=\\\"disability\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n              [(ngModel)]=\\\"editServiceDetails.Disability_Served\\\" multiple>\\n              <mat-option *ngFor=\\\"let item of disabilityArray\\\" [value]=\\\"item.id\\\">\\n                {{item.name}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <span *ngIf=\\\"editServiceForm.controls.disability.errors?.required\\\">Please select at least one\\n                disability type.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <input matInput placeholder=\\\"Brief\\\" [(ngModel)]=\\\"editServiceDetails.Brief\\\" formControlName=\\\"brief\\\"\\n              [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\".*[^ ].*\\\">\\n            <mat-icon matSuffix color=\\\"warn\\\"\\n              *ngIf=\\\"(editServiceForm.controls.brief.invalid && editServiceForm.controls.brief.touched) || (editServiceForm.controls.brief.invalid && showErrorIcon && !editServiceForm.controls.brief.touched)\\\">\\n              error\\n            </mat-icon>\\n            <mat-error>\\n              <span *ngIf=\\\"editServiceForm.controls.brief.errors?.required\\\">\\n                Brief is required.</span>\\n              <span *ngIf=\\\"editServiceForm.controls.brief.errors?.pattern\\\">Please enter valid brief.</span>\\n\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <input matInput placeholder=\\\"Description\\\" [(ngModel)]=\\\"editServiceDetails.Description\\\"  formControlName=\\\"description\\\"\\n              [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\".*[^ ].*\\\">\\n            <mat-icon matSuffix color=\\\"warn\\\"\\n              *ngIf=\\\"(editServiceForm.controls.description.invalid && editServiceForm.controls.description.touched) || (editServiceForm.controls.description.invalid && showErrorIcon && !editServiceForm.controls.description.touched)\\\">\\n              error\\n            </mat-icon>\\n            <mat-error>\\n              <span *ngIf=\\\"editServiceForm.controls.description.errors?.required\\\">\\n                Description is required.</span>\\n              <span *ngIf=\\\"editServiceForm.controls.description.errors?.pattern\\\">Please enter valid description.</span>\\n\\n            </mat-error>\\n          </mat-form-field>\\n          <br>\\n          <button type=\\\"submit\\\" class=\\\"buttonfont selector\\\">SAVE</button>\\n        </form>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  \\n</ion-content>\"","module.exports = \".itemmargins {\\n  margin-left: 10%;\\n  margin-right: 10%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWpheV9tYWNib29rYWlyL0RvY3VtZW50cy9naXRsYWIvYXRpbi1qb2JhYmlsaXR5LWFuZHJvaWQvc3JjL2FwcC9lZGl0c2VydmljZXMvZWRpdHNlcnZpY2VzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGdCQUFlO0VBQ2YsaUJBQWlCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9lZGl0c2VydmljZXMvZWRpdHNlcnZpY2VzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pdGVtbWFyZ2luc3tcbiAgICBtYXJnaW4tbGVmdDoxMCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMCU7XG59XG5cbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { DataservicesService } from '../providers/dataservices/dataservices.service';\nimport { LoadingController, AlertController } from '@ionic/angular';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-editservices',\n  templateUrl: './editservices.page.html',\n  styleUrls: ['./editservices.page.scss'],\n})\nexport class EditservicesPage implements OnInit {\n\n  editServiceForm: FormGroup;\n  showErrorIcon: boolean = false\n  editServiceDetails: any = []\n  categoryArray: any = []\n  disabilityArray: any[]\n\n  constructor\n    (\n      private router: Router,\n      private location: Location,\n      private activatedRoute: ActivatedRoute,\n      public dataServices: DataservicesService,\n      public loadingController: LoadingController,\n      public alertCtrl: AlertController,\n      public formBuilder: FormBuilder,\n\n  ) { }\n\n  ngOnInit() {\n    this.buildForm()\n    this.editServiceDetails = JSON.parse((this.activatedRoute.snapshot.paramMap.get('item')))\n    this.categoryArray = this.editServiceDetails.Service_Category_list\n    this.disabilityArray = this.editServiceDetails.Disability_Served_list\n  }\n\n\n  ionViewWillEnter() {\n  }\n\n  // Forms declaration\n  buildForm() {\n    this.editServiceForm = this.formBuilder.group({\n      serviceTitle: ['', Validators.required],\n      serviceCategory: ['', Validators.required],\n      disability: ['', Validators.required],\n      brief: ['', Validators.required],\n      description: ['', Validators.required],\n    });\n  }\n\n  closePage() {\n    this.location.back()\n  }\n\n  updateServiceDetail(form) {\n    if (this.editServiceForm.invalid) {\n      this.showErrorIcon = true\n      return\n    } else {\n      this.presentLoading()\n      this.showErrorIcon = false\n\n      let postData = {\n        \"service_name\": form.serviceTitle,\n        \"servicetype_id\": form.serviceCategory,\n        \"disability_id\": form.disability,\n        \"brife\": form.brief,\n        \"service_description\": form.description,\n        \"id\": this.editServiceDetails.Service_id,\n      }\n\n      this.dataServices.updateServicesDetail(postData).then((res: any) => {\n        this.loadingController.dismiss();\n        if (res.status == 1) {\n          this.presentAlert(res.message, '');\n        }\n        else {\n          this.presentAlert(res.message, '');\n        }\n      }, (error) => {\n        this.loadingController.dismiss();\n        console.log(error);\n      });\n\n    }\n  }\n\n  async presentLoading() {\n    const loading = await this.loadingController.create({\n      message: 'Please wait...',\n      // spinner: null\n    });\n    await loading.present();\n    setTimeout(() => {\n      loading.dismiss();\n    }, 500);\n  }\n\n  async presentAlert(title, message) {\n    const alert = await this.alertCtrl.create({\n      header: title,\n      message: message,\n      // buttons: ['OK']\n      buttons: [\n        {\n          text: 'OK',\n          handler: () => {\n            this.closePage()\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n"],"sourceRoot":""}