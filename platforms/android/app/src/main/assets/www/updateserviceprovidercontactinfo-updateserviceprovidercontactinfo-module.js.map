{"version":3,"sources":["webpack:///./src/app/updateserviceprovidercontactinfo/updateserviceprovidercontactinfo.module.ts","webpack:///./src/app/updateserviceprovidercontactinfo/updateserviceprovidercontactinfo.page.html","webpack:///./src/app/updateserviceprovidercontactinfo/updateserviceprovidercontactinfo.page.scss","webpack:///./src/app/updateserviceprovidercontactinfo/updateserviceprovidercontactinfo.page.ts"],"names":[],"mappings":"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","file":"updateserviceprovidercontactinfo-updateserviceprovidercontactinfo-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule ,ReactiveFormsModule} from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UpdateserviceprovidercontactinfoPage } from './updateserviceprovidercontactinfo.page';\nimport { MatInputModule, MatIconModule,MatSelectModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UpdateserviceprovidercontactinfoPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UpdateserviceprovidercontactinfoPage]\n})\nexport class UpdateserviceprovidercontactinfoPageModule {}\n","module.exports = \"<ion-toolbar class=\\\"new-background-color\\\">\\n    <ion-item lines=\\\"none\\\" class=\\\"new-background-color\\\">\\n        <ion-icon (click)=\\\"closePage()\\\" name=\\\"close\\\" style=\\\" color: #2b0c43\\\"></ion-icon>\\n        <ion-title style=\\\"margin-left: 5%; color: #2b0c43\\\">Contact Information</ion-title>\\n    </ion-item>\\n</ion-toolbar>\\n<ion-content>\\n    <ion-card class=\\\"cardMargins\\\">\\n        <ion-card-content>\\n            <div class=\\\"formPadding\\\">\\n                <form [formGroup]=\\\"updateContactDetailsForm\\\"\\n                    (ngSubmit)=\\\"updateServiceProviderContactDetail(updateContactDetailsForm.value)\\\">\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input matInput placeholder=\\\"Name\\\" [(ngModel)]=\\\"dataArray.first_name\\\" formControlName=\\\"name\\\"\\n                            [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\"^[a-zA-Z]+[\\\\-'\\\\s]?[a-zA-Z ]+$\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.name.invalid && updateContactDetailsForm.controls.name.touched) || (updateContactDetailsForm.controls.name.invalid && showErrorIcon && !updateContactDetailsForm.controls.name.touched)\\\">\\n                            error\\n                        </mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.name.errors?.required\\\">Name is\\n                                required.</span>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.name.errors?.pattern\\\">Please enter valid\\n                                name.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input matInput placeholder=\\\"Designation\\\" [(ngModel)]=\\\"dataArray.designation\\\"\\n                            formControlName=\\\"designation\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                            pattern=\\\"^[a-zA-Z]+[\\\\-'\\\\s]?[a-zA-Z. ]+$\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.designation.invalid && updateContactDetailsForm.controls.designation.touched) || (updateContactDetailsForm.controls.designation.invalid && showErrorIcon && !updateContactDetailsForm.controls.designation.touched)\\\">\\n                            error\\n                        </mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.designation.errors?.required\\\">Designation is\\n                                required.</span>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.designation.errors?.pattern\\\">Please enter\\n                                valid\\n                                designation.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input matInput placeholder=\\\"Email\\\" [(ngModel)]=\\\"dataArray.email\\\" formControlName=\\\"email\\\"\\n                            [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.email.invalid && updateContactDetailsForm.controls.email.touched) || (updateContactDetailsForm.controls.email.invalid && showErrorIcon && !updateContactDetailsForm.controls.email.touched)\\\">\\n                            error\\n                        </mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.email.errors?.required\\\">Email is\\n                                required.</span>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.email.errors?.pattern\\\">Please enter valid\\n                                email\\n                                address.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input matInput placeholder=\\\"Alternative Email(optional)\\\" [(ngModel)]=\\\"dataArray.business_email\\\"\\n                            formControlName=\\\"businessEmail\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                            pattern=\\\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.businessEmail.invalid && updateContactDetailsForm.controls.businessEmail.touched) || (updateContactDetailsForm.controls.businessEmail.invalid && showErrorIcon && !updateContactDetailsForm.controls.businessEmail.touched)\\\">\\n                            error\\n                        </mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.businessEmail.errors?.pattern\\\">Please enter\\n                                valid\\n                                alternative email\\n                                address.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input type=\\\"tel\\\" matInput placeholder=\\\"Phone(optional)\\\" [(ngModel)]=\\\"dataArray.phone\\\"\\n                            formControlName=\\\"phone\\\" [errorStateMatcher]=\\\"esMatcher\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.phone.invalid && updateContactDetailsForm.controls.phone.touched) || (updateContactDetailsForm.controls.phone.invalid  && showErrorIcon && !updateContactDetailsForm.controls.phone.touched)\\\">\\n                            error</mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.phone.errors?.maxlength\\\">Please\\n                                enter valid phone number.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input type=\\\"tel\\\" matInput placeholder=\\\"Mobile\\\" [(ngModel)]=\\\"dataArray.mobile\\\"\\n                            formControlName=\\\"mobile\\\" [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\"^[0-9]{10}$\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.mobile.invalid && updateContactDetailsForm.controls.mobile.touched) || (updateContactDetailsForm.controls.mobile.invalid  && showErrorIcon && !updateContactDetailsForm.controls.mobile.touched)\\\">\\n                            error</mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.mobile.errors?.required\\\">Mobile number is\\n                                required.</span>\\n                            <span\\n                                *ngIf=\\\"updateContactDetailsForm.controls.mobile.errors?.minlength || updateContactDetailsForm.controls.mobile.errors?.maxlength\\\">Please\\n                                enter valid mobile number.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <textarea matInput placeholder=\\\"Address\\\" [(ngModel)]=\\\"dataArray.address\\\"\\n                            formControlName=\\\"address\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                            pattern=\\\".*[^ ].*\\\"></textarea>\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.address.invalid && updateContactDetailsForm.controls.address.touched) || (updateContactDetailsForm.controls.address.invalid && showErrorIcon && !updateContactDetailsForm.controls.address.touched)\\\">\\n                            error\\n                        </mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.address.errors?.required\\\">Address is\\n                                required.</span>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.address.errors?.pattern\\\">Please enter valid\\n                                address.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <mat-label>Country</mat-label>\\n                        <mat-select formControlName=\\\"country\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                            (selectionChange)=\\\"selectedCountryValue($event.value)\\\" [(ngModel)]=\\\"dataArray.country\\\">\\n                            <mat-option *ngFor=\\\"let item of countryArrayFromLocalStorage\\\" [value]=\\\"item.id\\\">\\n                                {{item.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.country.errors?.required\\\">Country is\\n                                required.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <mat-label>State</mat-label>\\n                        <mat-select formControlName=\\\"state\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                            (selectionChange)=\\\"selectedStatesValue($event.value)\\\" [(ngModel)]=\\\"dataArray.state\\\">\\n                            <mat-option *ngFor=\\\"let item of cityAndStateArrayFromLocalStorage\\\" [value]=\\\"item.id\\\">\\n                                {{item.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.state.errors?.required\\\">State is\\n                                required.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <mat-label>City</mat-label>\\n                        <mat-select formControlName=\\\"city\\\" [errorStateMatcher]=\\\"esMatcher\\\" [(ngModel)]=\\\"dataArray.city\\\">\\n                            <mat-option *ngFor=\\\"let item of cityNameArray\\\" [value]=\\\"item.id\\\">\\n                                {{item.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.city.errors?.required\\\">City is\\n                                required.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field class=\\\"inputFields\\\">\\n                        <input type=\\\"tel\\\" matInput placeholder=\\\"ZIP / PIN Code\\\" [(ngModel)]=\\\"dataArray.zip_code\\\"\\n                            formControlName=\\\"zipCode\\\" [errorStateMatcher]=\\\"esMatcher\\\">\\n                        <mat-icon matSuffix color=\\\"warn\\\"\\n                            *ngIf=\\\"(updateContactDetailsForm.controls.zipCode.invalid && updateContactDetailsForm.controls.zipCode.touched) || (updateContactDetailsForm.controls.zipCode.invalid  && showErrorIcon && !updateContactDetailsForm.controls.zipCode.touched)\\\">\\n                            error</mat-icon>\\n                        <mat-error>\\n                            <span *ngIf=\\\"updateContactDetailsForm.controls.zipCode.errors?.required\\\">Zip / pin code is\\n                                required.</span>\\n                            <span\\n                                *ngIf=\\\"updateContactDetailsForm.controls.zipCode.errors?.minlength || updateContactDetailsForm.controls.zipCode.errors?.maxlength\\\">Please\\n                                enter valid zip / pin code.</span>\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <button type=\\\"submit\\\" class=\\\"buttonfont selector loginButton\\\">SAVE</button>\\n\\n                </form>\\n            </div>\\n        </ion-card-content>\\n    </ion-card>\\n</ion-content>\"","module.exports = \".floatingcss {\\n  width: 90%;\\n  margin-left: 5%;\\n  margin-right: 5%;\\n  font-size: 14px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWpheV9tYWNib29rYWlyL0RvY3VtZW50cy9naXRsYWIvYXRpbi1qb2JhYmlsaXR5LWFuZHJvaWQvc3JjL2FwcC91cGRhdGVzZXJ2aWNlcHJvdmlkZXJjb250YWN0aW5mby91cGRhdGVzZXJ2aWNlcHJvdmlkZXJjb250YWN0aW5mby5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxVQUFTO0VBQ1QsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixlQUFjLEVBQUEiLCJmaWxlIjoic3JjL2FwcC91cGRhdGVzZXJ2aWNlcHJvdmlkZXJjb250YWN0aW5mby91cGRhdGVzZXJ2aWNlcHJvdmlkZXJjb250YWN0aW5mby5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZmxvYXRpbmdjc3N7XG4gICAgd2lkdGg6OTAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuICAgIGZvbnQtc2l6ZToxNHB4O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataservicesService } from '../providers/dataservices/dataservices.service';\nimport { AlertController, LoadingController } from '@ionic/angular';\n\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n    selector: 'app-updateserviceprovidercontactinfo',\n    templateUrl: './updateserviceprovidercontactinfo.page.html',\n    styleUrls: ['./updateserviceprovidercontactinfo.page.scss'],\n})\nexport class UpdateserviceprovidercontactinfoPage implements OnInit {\n    updateContactDetailsForm: FormGroup;\n    showErrorIcon: boolean = false\n    dataArray: any\n    stateAndCityArray: any\n    countryArray: any\n    countryArrayFromLocalStorage: any\n    cityAndStateArrayFromLocalStorage: any\n    cityNameArray = []\n\n    constructor(private router: Router,\n        private dataServices: DataservicesService,\n        private alertCtrl: AlertController,\n        private activatedRoute: ActivatedRoute,\n        public loadingController: LoadingController,\n        public formBuilder: FormBuilder,\n\n    ) {\n\n        this.stateAndCityArray = localStorage.getItem(\"stateAndCityArray\");\n        this.countryArray = localStorage.getItem(\"countryArray\");\n        this.dataArray = JSON.parse((this.activatedRoute.snapshot.paramMap.get('serviceProviderInfo')));\n\n        if ((this.countryArray != '' || this.countryArray != null || this.countryArray != undefined) &&\n            (this.stateAndCityArray != '' || this.stateAndCityArray != null || this.stateAndCityArray != undefined)) {\n            this.setDefaultCity(this.countryArray, this.stateAndCityArray);\n        }\n        else {\n            this.countryArrayFromLocalStorage = JSON.parse(this.countryArray).country_list;\n        }\n    }\n\n    ngOnInit() {\n        this.buildForm()\n    }\n\n    buildForm() {\n        this.updateContactDetailsForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            designation: ['', Validators.required],\n            email: ['', Validators.required],\n            businessEmail: [''],\n            phone: ['', Validators.compose([Validators.maxLength(15)])],\n            mobile: ['', Validators.compose([Validators.required, Validators.minLength(10), Validators.maxLength(10)])],\n            address: ['', Validators.required],\n            country: ['', Validators.required],\n            state: ['', Validators.required],\n            city: ['', Validators.required],\n            zipCode: ['', Validators.compose([Validators.required, Validators.minLength(6), Validators.maxLength(6)])],\n        });\n    }\n\n    getDDLAPI(country) {\n        this.dataServices.getDDLAPI(country).then((res: any) => {\n            if (res.status == 1) {\n                this.cityAndStateArrayFromLocalStorage = [];\n                localStorage.setItem(\"stateAndCityArray\", JSON.stringify(res));\n                this.cityAndStateArrayFromLocalStorage = res.ddl_list.state_list;\n            }\n        }, error => {\n            console.log('Error in login: ' + JSON.stringify(error))\n        })\n    }\n\n\n    // Function for showing selected value city.\n    setDefaultCity(countryArray, stateAndCityArray) {\n        this.countryArrayFromLocalStorage = JSON.parse(countryArray).country_list;\n        if (this.dataArray.state != 0) {\n            this.cityAndStateArrayFromLocalStorage = JSON.parse(stateAndCityArray).ddl_list.state_list;\n            for (let i = 0; i < this.cityAndStateArrayFromLocalStorage.length; i++) {\n                if (this.cityAndStateArrayFromLocalStorage[i].id == this.dataArray.state) {\n                    this.cityNameArray = this.cityAndStateArrayFromLocalStorage[i].city\n                }\n            }\n        }\n    } //setDefaultCity Ends Here;\n\n    // Function To show Alert\n    async presentAlert(title, message) {\n        const alert = await this.alertCtrl.create({\n            header: title,\n            message: message,\n            // buttons: ['OK']\n            buttons: [\n                {\n                    text: 'OK',\n                    handler: () => {\n                        this.closePage()\n                    }\n                }\n            ]\n        });\n        await alert.present();\n    } // presentAlert Function Ends Here\n\n    closePage() {\n        this.router.navigate(['/serviceproviderprofile']);\n    }\n\n    selectedCountryValue(countryId) {\n        this.dataArray.state = ''\n        this.dataArray.city = ''\n        this.getDDLAPI(countryId);\n    }\n\n    selectedStatesValue(stateId) {\n        this.dataArray.city = ''\n        for (let i = 0; i < this.cityAndStateArrayFromLocalStorage.length; i++) {\n            if (this.cityAndStateArrayFromLocalStorage[i].id == stateId) {\n                this.cityNameArray = this.cityAndStateArrayFromLocalStorage[i].city\n            }\n        }\n    }\n\n    updateServiceProviderContactDetail(contactDetailsform) {\n        if (this.updateContactDetailsForm.invalid) {\n            this.showErrorIcon = true\n            return\n        } else {\n            this.presentLoading()\n            this.dataServices.updateServiceproviderContactInfoAPI(contactDetailsform).then((res: any) => {\n                if (res.status == 1) {\n                    this.loadingController.dismiss()\n                    this.presentAlert(res.message, '');\n                }\n                else {\n                    this.loadingController.dismiss()\n                    this.presentAlert(res.message, '');\n                }\n            }, (error) => {\n                alert(error);\n            });\n        }\n    }\n    //Display loader \n    async presentLoading() {\n        const loading = await this.loadingController.create({\n            message: 'Please wait...',\n            // spinner: null\n        });\n        await loading.present();\n    }//Display Function Ends Here  \n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n    }\n}"],"sourceRoot":""}