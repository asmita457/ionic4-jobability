{"version":3,"sources":["webpack:///./src/app/updateskillset/updateskillset.module.ts","webpack:///./src/app/updateskillset/updateskillset.page.html","webpack:///./src/app/updateskillset/updateskillset.page.scss","webpack:///./src/app/updateskillset/updateskillset.page.ts"],"names":[],"mappings":"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","file":"updateskillset-updateskillset-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule,ReactiveFormsModule  } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UpdateskillsetPage } from './updateskillset.page';\nimport { MatInputModule, MatIconModule,MatSelectModule } from '@angular/material';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UpdateskillsetPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [UpdateskillsetPage]\n})\nexport class UpdateskillsetPageModule {}\n","module.exports = \"<ion-toolbar class=\\\"new-background-color\\\">\\n  <ion-item lines=\\\"none\\\" class=\\\"new-background-color\\\">\\n    <ion-icon (click)=\\\"closePage()\\\" name=\\\"close\\\" style=\\\" color: #2b0c43\\\"></ion-icon>\\n    <ion-title style=\\\"margin-left: 5%; color: #2b0c43\\\">Present Skillsets</ion-title>\\n  </ion-item>\\n</ion-toolbar>\\n\\n<ion-content>\\n  <ion-card class=\\\"cardMargins boxShadow\\\">\\n    <ion-card-content>\\n      <div class=\\\"formPadding\\\">\\n        <form [formGroup]=\\\"updateSkillsetDetailsForm\\\"\\n          (ngSubmit)=\\\"updateSkillsetDetail(updateSkillsetDetailsForm.value)\\\">\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <mat-label>Industry</mat-label>\\n            <mat-select  formControlName=\\\"industry\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n              [(ngModel)]=\\\"dataArray.industryId == 0 ? '' : dataArray.industryId\\\"\\n              (selectionChange)=\\\"selectedIndustry($event.value)\\\" [aria-label]=\\\"readIndustry\\\">\\n              <mat-option *ngFor=\\\"let item of industryTypeArray\\\" [value]=\\\"item.id\\\">\\n                {{item.name}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <span *ngIf=\\\"updateSkillsetDetailsForm.controls.industry.errors?.required\\\">Industry is required.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <mat-label>Functional Area</mat-label>\\n            <mat-select formControlName=\\\"functionalArea\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n              [(ngModel)]=\\\"dataArray.functionalAreaId == 0 ? '' : dataArray.functionalAreaId\\\" (selectionChange)=\\\"selectedFunctionalArea($event.value)\\\" [aria-label]=\\\"readFunctionalArea\\\">\\n              <mat-option *ngFor=\\\"let item of functionAreaList\\\" [value]=\\\"item.id\\\">\\n                {{item.name}}\\n              </mat-option>\\n            </mat-select>\\n            <mat-error>\\n              <span *ngIf=\\\"updateSkillsetDetailsForm.controls.functionalArea.errors?.required\\\">Functional area is\\n                required.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <ion-label>Total Experience:</ion-label>\\n          <ion-row>\\n            <ion-col size=\\\"6\\\">\\n              <mat-form-field class=\\\"inputFields\\\">\\n                <mat-label>Year</mat-label>\\n                <mat-select formControlName=\\\"year\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                  [(ngModel)]=\\\"dataArray.totalYearExperience\\\"  (selectionChange)=\\\"selectedYear($event.value)\\\" [aria-label]=\\\"readYear\\\">\\n                  <mat-option *ngFor=\\\"let item of yearExperianceArray\\\" [value]=\\\"item\\\">\\n                    {{item}}\\n                  </mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n            </ion-col>\\n\\n            <ion-col size=\\\"6\\\">\\n              <mat-form-field class=\\\"inputFields\\\">\\n                <mat-label>Month</mat-label>\\n                <mat-select formControlName=\\\"month\\\" [errorStateMatcher]=\\\"esMatcher\\\"\\n                  [(ngModel)]=\\\"dataArray.totalMonthExperience\\\" (selectionChange)=\\\"selectedMonth($event.value)\\\" [aria-label]=\\\"readMonth\\\">\\n                  <mat-option *ngFor=\\\"let item of monthExperianceArray\\\" [value]=\\\"item\\\">\\n                    {{item}}\\n                  </mat-option>\\n                </mat-select>\\n              </mat-form-field>\\n            </ion-col>\\n          </ion-row>\\n\\n\\n          <mat-form-field class=\\\"inputFields\\\">\\n            <input matInput placeholder=\\\"Key Skills\\\" formControlName=\\\"KeySkills\\\" [(ngModel)]=\\\"dataArray.KeySkills\\\"\\n              [errorStateMatcher]=\\\"esMatcher\\\" pattern=\\\"^[a-zA-Z]+[\\\\-'\\\\s\\\\]?[a-zA-Z,. ]+$\\\">\\n            <mat-icon matSuffix color=\\\"warn\\\"\\n              *ngIf=\\\"(updateSkillsetDetailsForm.controls.KeySkills.invalid && updateSkillsetDetailsForm.controls.KeySkills.touched) || (updateSkillsetDetailsForm.controls.KeySkills.invalid && showErrorIcon && !updateSkillsetDetailsForm.controls.KeySkills.touched)\\\">\\n              error\\n            </mat-icon>\\n            <mat-error>\\n              <span *ngIf=\\\"updateSkillsetDetailsForm.controls.KeySkills.errors?.required\\\">Key skills is required.</span>\\n              <span *ngIf=\\\"updateSkillsetDetailsForm.controls.KeySkills.errors?.pattern\\\">Please enter valid Key\\n                skills.</span>\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <p style=\\\"color: gray;\\\">Note: You can add multiple skills seperated by comma.</p>\\n          <br>\\n          <button type=\\\"submit\\\" class=\\\"buttonfont selector loginButton\\\">SAVE</button>\\n        </form>\\n      </div>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\"","module.exports = \".sc-ion-alert-md-h {\\n  --min-width: 100% !important; }\\n\\n.boxShadow {\\n  box-shadow: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWpheV9tYWNib29rYWlyL0RvY3VtZW50cy9naXRsYWIvYXRpbi1qb2JhYmlsaXR5LWFuZHJvaWQvc3JjL2FwcC91cGRhdGVza2lsbHNldC91cGRhdGVza2lsbHNldC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDSSw0QkFBWSxFQUFBOztBQUdoQjtFQUNJLGdCQUFnQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvdXBkYXRlc2tpbGxzZXQvdXBkYXRlc2tpbGxzZXQucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uc2MtaW9uLWFsZXJ0LW1kLWgge1xuICAgIC0tbWluLXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG59XG5cbi5ib3hTaGFkb3d7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataservicesService } from '../providers/dataservices/dataservices.service';\nimport { AlertController, NavController } from '@ionic/angular';\nimport { Events, LoadingController } from '@ionic/angular';\n\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-updateskillset',\n  templateUrl: './updateskillset.page.html',\n  styleUrls: ['./updateskillset.page.scss'],\n})\nexport class UpdateskillsetPage implements OnInit {\n\n  yearExperianceArray: any = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']\n  monthExperianceArray: any = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']\n\n  dataArray: any;\n  showErrorIcon: boolean = false\n  functionalAreaName: any;\n  industryName: any;\n  seekerInfo: any;\n  functionAreaList: any;\n  industryTypeArray: any;\n\n  readIndustry: string = 'Please select industry'\n  readFunctionalArea: string = 'Please select functional area'\n  readYear: string = 'Please select year'\n  readMonth: string = 'Please select month'\n\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataServices: DataservicesService,\n    private alertCtrl: AlertController,\n    public loadingController: LoadingController,\n    public formBuilder: FormBuilder,\n    public navCtrl: NavController\n\n  ) {\n\n    this.onPageLoad();\n  }\n\n  // Forms declaration\n  updateSkillsetDetailsForm = this.formBuilder.group({\n    industry: ['', Validators.required],\n    functionalArea: ['', Validators.required],\n    year: [''],\n    month: [''],\n    KeySkills: ['', Validators.required],\n  });\n\n  ngOnInit() {\n    // this.getDropDownListArray();\n\n  }\n\n\n\n  onPageLoad() {\n\n    const contactInfo = (this.activatedRoute.snapshot.paramMap.get('seekerSkillSetInfo'));\n    this.dataArray = JSON.parse(contactInfo);\n    this.functionalAreaName = this.dataArray.functionalAreaName\n    this.industryName = this.dataArray.industryName\n    this.readIndustry = this.industryName\n    this.readFunctionalArea = this.dataArray.functionalAreaName\n    this.readYear = this.dataArray.totalYearExperience\n    this.readMonth = this.dataArray.totalMonthExperience\n    this.seekerInfo = localStorage.getItem(\"stateAndCityArray\");\n    this.functionAreaList = JSON.parse(this.seekerInfo).ddl_list.functional_area_list;\n    this.industryTypeArray = JSON.parse(this.seekerInfo).ddl_list.industry_list\n  }\n\n\n  closePage() {\n    // this.router.navigate(['/profile'])\n    this.navCtrl.navigateRoot('/profile');\n\n  }\n\n  //On change Functions\n  selectedIndustry(industryId: any) {\n    for (let i = 0; i <= this.industryTypeArray.length; i++) {\n      if (this.industryTypeArray[i].id == industryId) {\n        this.industryName = this.industryTypeArray[i].name\n        this.readIndustry = this.industryName\n        return\n      }\n    }\n  }\n\n  selectedFunctionalArea(functionalAreaId) {\n    for (let i = 0; i <= this.functionAreaList.length; i++) {\n      if (this.functionAreaList[i].id == functionalAreaId) {\n        this.functionalAreaName = this.functionAreaList[i].name\n        this.readFunctionalArea = this.functionalAreaName\n        return\n      }\n    }\n  }\n\n  selectedYear(year) {\n    this.readYear = year\n  }\n\n  selectedMonth(month) {\n    this.readMonth = month\n  }\n\n\n  // onChange Functions Ends Here.\n\n\n  updateSkillsetDetail(form) {\n    if (this.updateSkillsetDetailsForm.invalid) {\n      this.showErrorIcon = true\n      return\n    } else {\n      this.presentLoading();\n      this.dataServices.updatePresentSkillSetAPI(form, this.industryName, this.functionalAreaName).then((res: any) => {\n        this.loadingController.dismiss();\n        if (res.status == 1) {\n          this.presentAlert(res.message, '');\n        }\n        else {\n          this.presentAlert(res.message, '');\n        }\n      }, (error) => {\n        this.loadingController.dismiss();\n        console.log(error);\n      });\n    }\n  }\n\n  async presentAlert(title, message) {\n    const alert = await this.alertCtrl.create({\n      header: title,\n      subHeader: message,\n      buttons: [{\n        text: 'OK',\n        cssClass: 'secondary',\n        handler: (blah) => {\n          this.closePage();\n        }\n      }]\n    });\n    await alert.present();\n  }\n\n  //Display loader \n  async presentLoading() {\n    const loading = await this.loadingController.create({\n      message: 'Please wait...',\n      // spinner: null\n    });\n    await loading.present();\n  }//Display Function Ends Here \n\n  ionViewWillLeave() {\n    this.loadingController.dismiss();\n  }\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}"],"sourceRoot":""}